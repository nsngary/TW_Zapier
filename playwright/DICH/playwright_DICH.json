{
  "target": {
    "url": "https://dich-fashion.webflow.io/",
    "viewport": { "width": 1330, "height": 1004 },
    "device": "Desktop",
    "locale": "zh-TW",
    "timezone": "Asia/Taipei",
    "colorScheme": "dark",
    "reducedMotion": "no-preference",
    "network": { "throttle": "none", "offline": false },
    "permissions": [],
    "cookies": [],
    "storageSeed": {}
  },
  "elements": [
    {
      "name": "texture-backgrounds",
      "selector": ".texturure-bg, .texturure-bg-wrap, .texturure-bg-light, .texturure-bg-dark, .texture-bg, .texture-bg-wrap, .texture-bg-light, .texture-bg-dark",
      "anchorSelector": "body",
      "group": true
    }
  ],
  "toolSequence": [
    {
      "tool": "browser_navigate_Playwright",
      "args": ["https://dich-fashion.webflow.io/"]
    },
    {
      "tool": "browser_evaluate_Playwright",
      "args": ["(() => new Promise(async (resolve) => { const sleep = ms => new Promise(r=>setTimeout(r, ms)); await sleep(9000); const btn = document.querySelector('.button-circle-texture'); if (btn) btn.click(); const waitFor = async (sel, tries=80) => { for (let i=0;i<tries;i++){ if (document.querySelector(sel)) return true; await sleep(250); } return false; }; await waitFor('.texturure-bg, .texture-bg, .texturure-bg-wrap, .texture-bg-wrap, .texturure-bg-light, .texture-bg-light, .texturure-bg-dark, .texture-bg-dark'); resolve('entered'); }))()"]
    },
    {
      "tool": "browser_snapshot_Playwright",
      "args": []
    },
    {
      "tool": "browser_evaluate_Playwright",
      "args": ["(() => { const SEL = '.texturure-bg, .texturure-bg-wrap, .texturure-bg-light, .texturure-bg-dark, .texture-bg, .texture-bg-wrap, .texture-bg-light, .texture-bg-dark'; const waapi=(document.getAnimations?.()||[]).map(a=>{const t=a.effect?.getTiming?.()||{}; const el=a.effect?.target; return { target: el?.id || el?.className || el?.tagName, duration: t.duration, delay: t.delay, easing: t.easing, playbackRate: a.playbackRate };}); let gsap=[]; try { if (window.gsap?.globalTimeline) { gsap = window.gsap.globalTimeline.getChildren(true,true,true).map(t=>({ id: t.vars?.id || null, duration: t.duration(), ease: t.vars?.ease || null, stagger: t.vars?.stagger || null, scrollTrigger: !!t.vars?.scrollTrigger })); } } catch(e){} window.__twz = { sel: SEL, anims: { waapi, gsap }, samples: [] }; return { hooked: true, targets: document.querySelectorAll(SEL).length }; })()"]
    },
    {
      "tool": "browser_evaluate_Playwright",
      "args": ["(() => new Promise(async (resolve) => { const SEL = (window.__twz && window.__twz.sel) || '.texturure-bg, .texturure-bg-wrap, .texturure-bg-light, .texturure-bg-dark, .texture-bg, .texture-bg-wrap, .texture-bg-light, .texture-bg-dark'; const props = ['backgroundColor','backgroundImage','opacity','filter','mixBlendMode','transform']; const targets = Array.from(document.querySelectorAll(SEL)); const out = []; const doc = document.scrollingElement || document.documentElement; const height = Math.max(doc.scrollHeight, document.body.scrollHeight); const to = Math.min(height - 1, 5000); for (let y=0; y<=to; y+=80) { window.scrollTo({ top: y, behavior: 'instant' }); await new Promise(r => requestAnimationFrame(r)); const t = performance.now(); const samples = targets.map((el, idx) => { const s = getComputedStyle(el); const rect = el.getBoundingClientRect(); const vars = {}; for (let i=0;i<s.length;i++){ const p = s[i]; if (p.startsWith('--')) vars[p] = s.getPropertyValue(p).trim(); } const data = { i: idx, top: rect.top, left: rect.left, width: rect.width, height: rect.height }; props.forEach(p => data[p] = s[p]); return { ...data, cssVars: vars }; }); out.push({ y, t, samples }); } if (window.__twz) window.__twz.samples = out; resolve({ frames: out.length, targets: targets.length, to }); }))()"]
    },
    {
      "tool": "browser_snapshot_Playwright",
      "args": []
    },
    {
      "tool": "browser_evaluate_Playwright",
      "args": ["(() => { return window.__twz || null; })()"]
    }
  ],
  "capture": {
    "trace": true,
    "har": true,
    "screenshots": ["after-discover", "after-sampling"],
    "reducedMotionPass": false
  },
  "output": {
    "savePath": "./analysis/dich-fashion-texture-bg.json",
    "rawJson": true,
    "generate": ["gsap", "css-keyframes"],
    "reproPath": "./repro/dich-fashion-texture-repro.ts"
  }
}
