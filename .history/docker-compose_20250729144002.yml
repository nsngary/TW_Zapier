version: '3.8'

services:
  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: tw-zapier-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tw_zapier_db
      POSTGRES_USER: tw_zapier
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: tw_zapier_db,n8n_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - tw-zapier-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tw_zapier -d tw_zapier_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 快取和任務佇列
  redis:
    image: redis:7-alpine
    container_name: tw-zapier-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tw-zapier-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass ""

  # n8n 工作流引擎
  n8n:
    image: n8nio/n8n:latest
    container_name: tw-zapier-n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=tw_zapier
      - DB_POSTGRESDB_PASSWORD=password
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678
      - N8N_API_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNGU3ZjZjOC1kNjE0LTRjZmItOTlhMS0xNzEyMzJhODBmZTkiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUzMzQyMDk1fQ.nF6YL0PM1JoNagJaE_Aj-PwlP6OgSCGkz78e-TOyBKk
      - GENERIC_TIMEZONE=Asia/Taipei
      - N8N_DEFAULT_LOCALE=zh-TW
      - N8N_PERSONALIZATION_ENABLED=false
      - EXECUTIONS_PROCESS=main
      - N8N_METRICS=true
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-nodes:/home/node/.n8n/custom
    networks:
      - tw-zapier-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI 後端服務 (開發模式)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: tw-zapier-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://tw_zapier:password@postgres:5432/tw_zapier_db
      - REDIS_URL=redis://redis:6379/0
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - tw-zapier-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Vue 前端服務 (開發模式)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: tw-zapier-frontend
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_N8N_BASE_URL=http://localhost:5678
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - tw-zapier-network
    depends_on:
      - backend
    command: npm run dev

  # Prometheus 監控 (可選，用於開發環境測試)
  prometheus:
    image: prom/prometheus:latest
    container_name: tw-zapier-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - tw-zapier-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana 儀表板 (可選，用於開發環境測試)
  grafana:
    image: grafana/grafana:latest
    container_name: tw-zapier-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - tw-zapier-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# 網路設定
networks:
  tw-zapier-network:
    driver: bridge
    name: tw-zapier-network

# 資料卷設定
volumes:
  postgres_data:
    name: tw-zapier-postgres-data
  redis_data:
    name: tw-zapier-redis-data
  n8n_data:
    name: tw-zapier-n8n-data
  backend_logs:
    name: tw-zapier-backend-logs
  prometheus_data:
    name: tw-zapier-prometheus-data
  grafana_data:
    name: tw-zapier-grafana-data
    
