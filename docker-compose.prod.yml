version: '3.8'

services:
  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: tw-zapier-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static
    networks:
      - tw-zapier-network
    depends_on:
      - backend
      - frontend

  # PostgreSQL 資料庫 (生產配置)
  postgres:
    image: postgres:15-alpine
    container_name: tw-zapier-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups
    networks:
      - tw-zapier-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # 不暴露埠號到主機 (僅內部網路存取)

  # Redis (生產配置)
  redis:
    image: redis:7-alpine
    container_name: tw-zapier-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - tw-zapier-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n (生產配置)
  n8n:
    image: n8nio/n8n:latest
    container_name: tw-zapier-n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=${DATABASE_USER}
      - DB_POSTGRESDB_PASSWORD=${DATABASE_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - GENERIC_TIMEZONE=Asia/Taipei
      - N8N_METRICS=true
      - EXECUTIONS_PROCESS=main
      - N8N_LOG_LEVEL=info
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-nodes:/home/node/.n8n/custom
    networks:
      - tw-zapier-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # FastAPI 後端 (生產配置)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: tw-zapier-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - backend_logs:/app/logs
      - static_files:/app/static
    networks:
      - tw-zapier-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy

  # Vue 前端 (生產配置)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: tw-zapier-frontend
    restart: unless-stopped
    volumes:
      - static_files:/app/dist
    networks:
      - tw-zapier-network
    depends_on:
      - backend

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:latest
    container_name: tw-zapier-prometheus
    restart: unless-stopped
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tw-zapier-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:latest
    container_name: tw-zapier-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - tw-zapier-network
    depends_on:
      - prometheus

# 網路設定
networks:
  tw-zapier-network:
    driver: bridge
    name: tw-zapier-network

# 資料卷設定
volumes:
  postgres_data:
    name: tw-zapier-postgres-data
  redis_data:
    name: tw-zapier-redis-data
  n8n_data:
    name: tw-zapier-n8n-data
  backend_logs:
    name: tw-zapier-backend-logs
  static_files:
    name: tw-zapier-static-files
  prometheus_data:
    name: tw-zapier-prometheus-data
  grafana_data:
    name: tw-zapier-grafana-data
